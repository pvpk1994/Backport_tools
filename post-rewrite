#!/usr/bin/python3

import sys
import os
import re
import subprocess
import json
import subprocess
from github import Github, Auth

commits_data = {}
REBASE_TEMP_FILE=".git/rebase-in-progress"
REBASE_CONFIG_FILE = ".git/rebase_hook_config.json"

# Repo-url parsing (only for github parsing)
# arg-1: input_str (git remote -v)
def get_repo_url(input_str):
	pattern = r'github\.com[/:]([\w-]+/[\w-]+)\.git'

	url_match = re.search(pattern, input_str)
	if url_match:
		repo_url = url_match.group(1)
		return repo_url
	else:
		print("No url for repository found!!")

def process_commit_rewrite(old_sha, new_sha, repo):
	print(f"Processing commit rewrite: {old_sha} -> {new_sha}")

	# Associate old SHA's comments with new SHA's comments
	c = repo.get_commit(new_sha)

	if not commits_data[old_sha]["comment"]:
		return

	c.create_comment(commits_data[old_sha]["comment"])


def main():
	if len(sys.argv) > 1 and sys.argv[1] == "rebase":
		print("Happens only for rebase")
		global commits_data

		sha_pairs = sys.stdin

		github_token = os.getenv("GITHUB_TOKEN")

		if github_token is None:
			raise ValueError("GITHUB_TOKEN env variable is NOT set")

		git_remote_output = subprocess.run(['git', 'remote', '-v'], stdout=subprocess.PIPE, text=True)
		output_lines = git_remote_output.stdout.splitlines()

		auth = Auth.Token(github_token)
		g = Github(auth=auth)
		r = g.get_repo(get_repo_url(output_lines[0]))

		try:
			with open('/tmp/comments.json', 'r') as file:
				commits_data = json.load(file)
		except:
			print("/tmp/comments.json file NOT found")

		# Perform only if rebase is in its final stage
		if os.path.isfile(REBASE_TEMP_FILE):
			print("Rebase done. Let's push changes...")
			git_push = "git push --force origin"
			out=subprocess.run(git_push, shell=True, capture_output=True, text=True)
			if out.returncode != 0:
				print("git push --force FAILED.")
			elif out.returncode == 0:
				for sha_pair in sha_pairs:
					old_sha, new_sha = sha_pair.strip().split()
					process_commit_rewrite(old_sha, new_sha, r)

				comments = '/tmp/comments.json'
				in_progress = '.git/rebase-in-progress'

				if os.path.exists(in_progress):
					os.remove(in_progress)

				if os.path.exists(comments):
					os.remove(comments)

				sys.exit(0)


if __name__ == "__main__":

	# Check for user's rebase config
	with open(REBASE_CONFIG_FILE, 'r') as f:
		config = json.load(f)

	if not config.get("hooks_enabled", True):
		print("Custom post-rewrite hook is DISABLED as requested.")
		sys.exit(0)

	else:
		print("Custom post-rewrite hook is ENABLED as requested.")
		main()
